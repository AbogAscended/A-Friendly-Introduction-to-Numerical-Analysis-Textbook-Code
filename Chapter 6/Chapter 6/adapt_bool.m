function y = adapt_bool ( f, a, b, TOL )%ADAPT_BOOL    approximate the definite integral of an arbitrary function%              to within a specified error tolerance using adaptive %              quadrature based on Boole's rule (i.e., the closed%              Newton-Cotes quadrature rule with n = 4)%%     calling sequences:%             y = adapt_bool ( 'f', a, b, TOL )%             adapt_bool ( 'f', a, b, TOL )%%     inputs:%             f       string containing name of m-file defining integrand%             a       lower limit of integration%             b       upper limit of integration%             TOL     absolute error convergence tolerance%%     output:%             y       approximate value of the definite integral of f(x)%                     over the interval a < x < b%%     NOTE:%             if ADAPT_BOOL is called with no output arguments, the  %             approximate value of the definite integral of f(x) over %             the interval a < x < b will be displayed, together with%             the estimate for the error in the approximation and the %             total number of function evaluations used%h = ( b - a ) / 4;fa = feval ( f, a );fb = feval ( f, b );fc = feval ( f, a+h );fd = feval ( f, a+2*h );fe = feval ( f, a+3*h );sab = (b-a)*(7*(fa + fb) + 32*(fc + fe) + 12*fd)/90;[approx eest nfunc] = ab ( sab, fa, fc, fd, fe, fb, f, a, b, TOL );if ( nargout == 0 )   s = sprintf ( '\t\t approximate value of integral: \t %.12f \n', approx );   s = sprintf ( '%s \t\t error estimate: \t\t\t\t\t %.4e \n', s, eest );   s = sprintf ( '%s \t\t number of function evaluations: \t %d \n', s, nfunc+5 );   disp ( s )else   y = approx; end;returnfunction [app, est, nf] = ab ( sab, fa, fc, fd, fe, fb, f, a, b, TOL )h = ( b - a ) / 8;f1 = feval ( f, a + h );f3 = feval ( f, a+3*h );f5 = feval ( f, a+5*h );f7 = feval ( f, a+7*h );   sad = 2*h*(7*(fa + fd) + 32*(f1 + f3) + 12*fc)/45;sdb = 2*h*(7*(fd + fb) + 32*(f5 + f7) + 12*fe)/45;errest = abs ( sab - sad - sdb );if ( errest < (42.0*TOL) )   app = sad + sdb;   est = errest/42.0;   nf = 4;   return;else   [a1 e1 n1] = ab ( sad, fa, f1, fc, f3, fd, f, a, a+4*h, TOL/2.0 );   [a2 e2 n2] = ab ( sdb, fd, f5, fe, f7, fb, f, a+4*h, b, TOL/2.0 );   app = a1 + a2;   est = e1 + e2;   nf = n1 + n2 + 4;   return;end;