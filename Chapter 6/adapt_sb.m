function y = adapt_sb ( f, a, b, TOL )%ADAPT_SB      approximate the definite integral of an arbitrary function%              to within a specified error tolerance using adaptive %              quadrature based on Simpson's rule and Boole's rule%%     calling sequences:%             y = adapt_sb ( 'f', a, b, TOL )%             adapt_sb ( 'f', a, b, TOL )%%     inputs:%             f       string containing name of m-file defining integrand%             a       lower limit of integration%             b       upper limit of integration%             TOL     absolute error convergence tolerance%%     output:%             y       approximate value of the definite integral of f(x)%                     over the interval a < x < b%%     NOTE:%             if ADAPT_SB is called with no output arguments, the  %             approximate value of the definite integral of f(x) over %             the interval a < x < b will be displayed, together with%             the estimate for the error in the approximation and the %             total number of function evaluations used%h = ( b - a ) / 4;fa = feval ( f, a );fb = feval ( f, b );fc = feval ( f, a+h );fd = feval ( f, a+2*h );fe = feval ( f, a+3*h );[approx eest nfunc] = asb ( fa, fc, fd, fe, fb, f, a, b, TOL );if ( nargout == 0 )   s = sprintf ( '\t\t approximate value of integral: \t %.12f \n', approx );   s = sprintf ( '%s \t\t error estimate: \t\t\t\t\t %.4e \n', s, eest );   s = sprintf ( '%s \t\t number of function evaluations: \t %d \n', s, nfunc+5 );   disp ( s )else   y = approx; end;returnfunction [app, est, nf] = asb ( fa, fc, fd, fe, fb, f, a, b, TOL )sab = (b-a)*(fa + 4*fd + fb)/6;bab = (b-a)*(7*(fa + fb) + 32*(fc + fe) + 12*fd)/90;errest = abs ( sab - bab );if ( errest < TOL )   app = bab;   est = errest;   nf = 0;   return;else   h = ( b - a ) / 8;   f1 = feval ( f, a + h );   f3 = feval ( f, a+3*h );   f5 = feval ( f, a+5*h );   f7 = feval ( f, a+7*h );      [a1 e1 n1] = asb ( fa, f1, fc, f3, fd, f, a, a+4*h, TOL/2.0 );   [a2 e2 n2] = asb ( fd, f5, fe, f7, fb, f, a+4*h, b, TOL/2.0 );   app = a1 + a2;   est = e1 + e2;   nf = n1 + n2 + 4;   return;end;