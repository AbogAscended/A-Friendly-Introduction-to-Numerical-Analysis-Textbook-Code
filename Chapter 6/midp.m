function y = midp ( f, a, b, n )%MIDP       approximate the definite integral of an arbitrary function%           using the composite Midpoint rule (i.e., the open%           Newton-Cotes quadrature rule with n=0)%%     calling sequences:%             y = midp ( 'f', a, b, n )%             midp ( 'f', a, b, n )%%     inputs:%             f       string containing name of m-file defining integrand%             a       lower limit of integration%             b       upper limit of integration%             n       number of uniformly sized subintervals into which%                     integration interval is to be divided%                     (the resulting approximation will require n%                     function evaluations)%%     output:%             y       approximate value of the definite integral of f(x)%                     over the interval a < x < b%%     NOTE:%             if MIDP is called with no output arguments, the approximate %             value of the definite integral of f(x) over the interval %             a < x < b will be displayed%h = (b-a)/(2*n);x = linspace ( a+h, b-h, n );sum = 0.0;for i = 1:n    sum = sum + feval ( f, x(i) );endif ( nargout == 1 )    y = 2 * h * sum;else   disp ( 2 * h * sum );end