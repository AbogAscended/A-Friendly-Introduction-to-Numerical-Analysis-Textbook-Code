function [lambda, vects] = hotelling ( A, num_pairs, TOL, Nmax )%HOTELLING      apply Hotelling deflation to a symmetric matrix to %               approximate a specified number of eigenpairs associated%               with the largest eigenvalues of the matrix - the routine%               SYMPOWER is used to approximate each eigenpair%%     calling sequences:%             [lambda, vects] = hotelling ( A, num_pairs, TOL, Nmax )%             lambda = hotelling ( A, num_pairs, TOL, Nmax )%             hotelling ( A, num_pairs, TOL, Nmax )%%     inputs:%             A       square symmetric matrix whose eigenpairs are to be %                     approximated%             num_pairs%                     number of eigenpairs to approximate%             TOL     absolute error convergence tolerance applied during%                     each call to SYMPOWER%                     (convergence is measured in terms of the Euclidean%                     norm of the difference between successive terms %                     in the eigenvector seqeunce)%             Nmax    maximum number of iterations to be performed during%                     each call to SYMPOWER%%     outputs:%             lambda  vector containing the largest 'num_pairs' eigenvalues%                     of the matrix A%             vects   matrix containing eigenvectors corresponding to the %                     entries in the output vector 'lambda'%                     - the i-th column of this matrix is an eigenvector,%                       normalized to unit length in the Euclidean norm,%                       corresponding to the i-th entry in the vector%                       'lambda'%%     dependencies:%             this routine makes use of the routine SYMPOWER%%     NOTE:%             if the maximum number of iterations is exceeded during any%             call to SYMPOWER, a message to this effect will be displayed %[r c] = size ( A );if ( r ~= c )   disp ( 'hotelling error: matrix must be square' );   return;end;n = r;l = zeros ( 1, num_pairs );v = zeros ( n, num_pairs );[l(1) v(:,1)] = sympower ( A, rand(n,1), TOL, Nmax );for i = 2:num_pairs    A = hd ( A, l(i-1), v(:,i-1) );	[l(i) v(:,i)] = sympower ( A, rand(n,1), TOL, Nmax );end;lambda = l;vects = v;return;function B = hd ( A, l, v )B = A - ( l / dot ( v, v ) ) * v * v';return;