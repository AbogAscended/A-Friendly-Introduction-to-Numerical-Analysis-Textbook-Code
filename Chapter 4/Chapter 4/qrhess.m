function lambda = qrhess ( A, TOL, Nmax )%QRHESS         determine all of the eigenvalues of an upper Hessenberg%               matrix using the QR algorithm with Wilkinson shift%%     calling sequences:%             lambda = qrhess ( A, TOL, Nmax )%             qrhess ( A, TOL, Nmax )%%     input:%             A       upper Hessenberg matrix whose eigenvalues are to be%                     determined%             TOL     convergence tolerance%             Nmax    maximum number of iterations%%     output:%             lambda  vector containing the eigenvalues of A%%     NOTE:%             if the maximum number of iterations is exceeded, a message%             to this effect will be displayed, along with the number of%             eigenvalues which had been determined - these eigenvalues%             will be returned in the last entries of the output vector%             lambda%[row col] = size ( A );if ( row ~= col )   disp ( 'qrhess error: matrix must be square' );   return;end;n = row;c = zeros ( 1, n );s = zeros ( 1, n );shift = 0;togo = n;for its = 1 : Nmax    if ( togo == 1 )	   lambda(1) = A(1,1) + shift;	   disp ( its );	   return;	end;	    trace = A(togo-1,togo-1) + A(togo,togo);	det   = A(togo-1,togo-1)*A(togo,togo) - A(togo,togo-1)*A(togo-1,togo);	disc  = sqrt ( trace*trace - 4*det );	mu1 = ( (1/2) * ( trace + disc ) );	mu2 = ( (1/2) * ( trace - disc ) );	if ( abs ( mu1 - A(togo,togo) ) < abs ( mu2 - A(togo,togo) ) )	   s = mu1;	else	   s = mu2;	end;	    shift = shift + s;	for i = 1:togo 	    A(i,i) = A(i,i) - s;	end;	    for i = 2:togo        j = i-1;	    r = sqrt ( A(j,j)^2 + A(i,j)^2 );		if ( A(i,j) == 0 )		   c(i) = 1; s(i) = 0;		else	       c(i) = A(j,j) / r;	       s(i) = A(i,j) / r;		end;	    temp1 = c(i)*A(j,:) + s(i)*A(i,:);	    temp2 = -s(i)*A(j,:) + c(i)*A(i,:);	    A(j,:) = temp1;	    A(i,:) = temp2;    end;	for i = 2 : togo	    col1 = A(:,i-1) * c(i) + A(:,i) * s(i);		A(:,i) = -s(i) * A(:,i-1) + c(i) * A(:,i);		A(:,i-1) = col1;	end;	if ( abs(A(togo,togo-1)) < TOL )	   lambda(togo) = A(togo,togo) + shift;	   togo = togo - 1;	end;end;disp ( 'qrhes error: Maximum number of iterations exceeded' );disp ( sprintf ( '%d eigenvalues determined \n', n-togo ) );