function w = upwind ( a, b, NX, t0, tf, NT, ac, gc, ic, bc )%UPWIND       approximate the solution of the one-dimensional advection%             equation%%                    u_t + a(t,x,u) u_x = g(t,x,u)%%             using upwind differencing%%%     calling sequences:%             w = upwind ( a, b, NX, t0, tf, NT, ac, gc, ic, bc )%             upwind ( a, b, NX, t0, tf, NT, ac, gc, ic, bc )%%     inputs:%             a       left endpoint of space domain%             b       right endpoint of space domain%             NX      number of uniformly-sized subintervals in x-direction%             t0      initial time%             tf      final time%             NT      number of time steps to advance from t = t0 to%                     t = tf%             ac      string containing name of m-file defining the%                     advection coefficient; function should take three%                     inputs and return a single output value%             gc      string containing name of m-file defining the%                     right-hand side function; function should take three%                     inputs and return a single output value%             ic      string containing name of m-file defining the %                     initial conditions; function should take %                     one input and return the initial value of the solution %             bc      string containing name of m-file defining the %                     Dirichlet boundary conditions; function should take %                     one input and return a single output value%%     output:%             w       vector of length NX+1 containing the approximate %                     values of the solution of the advection equation%x = linspace ( a, b, NX+1 );dx = ( b - a ) / NX;t = linspace ( t0, tf, NT+1 );dt = ( tf - t0 ) / NT;wold = zeros ( 1, NX+1 );wnew = zeros ( 1, NX+1 );%%   load initial condition and appropriate boundary condition(s)%  for j = 1 : NX+1    wold(j) = feval ( ic, x(j) );end;wold(1) = feval ( bc, t(1) );%%   time stepping%for n = 1 : NT%%   set appropriate boundary condition value in new time step solution%    wnew(1) = feval ( bc, t(n+1) );%%   upwind differencing%    for j = 2 : NX+1        ajn = feval ( ac, t(n), x(j), wold(j) );	    gjn = feval ( gc, t(n), x(j), wold(j) );	    if ( ajn >= 0 )	       wnew(j) = wold(j) + (ajn*dt/dx) * ( wold(j-1) - wold(j) ) + dt*gjn;		else		   wnew(j) = wold(j) + (ajn*dt/dx) * ( wold(j) - wold(j+1) ) + dt*gjn;		end;	end;    wold = wnew;end;w = wold;