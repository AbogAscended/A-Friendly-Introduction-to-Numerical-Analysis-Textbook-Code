function [w, exact] = mac3_sc ( a, b, NX, t0, tf, NT, ac, gc )x = linspace ( a, b, NX+1 );dx = ( b - a ) / NX;t = linspace ( t0, tf, NT+1 );dt = ( tf - t0 ) / NT;wold = zeros ( 1, NX+1 );wstar = zeros ( 1, NX+1 );wnew = zeros ( 1, NX+1 );for j = 1 : NX+1    wold(j) = ic ( x(j) );end;for n = 1 : NT    for j = 1 : NX        aj = feval ( ac, t(n), x(j), wold(j) );		ajp = feval ( ac, t(n), x(j+1), wold(j+1) );	    gjn = feval ( gc, t(n), x(j), wold(j) );		wstar(j) = wold(j) - (dt/dx) * ( ajp * wold(j+1) - aj * wold(j) ) + dt * gjn;	end;		for j = 2 : NX        ajs = feval ( ac, t(n+1), x(j), wstar(j) );		ajsm = feval ( ac, t(n+1), x(j-1), wstar(j-1) );	    gjs = feval ( gc, t(n+1), x(j), wstar(j) );		wnew(j) = 0.5 * ( wold(j) + wstar(j) - (dt/dx) * ( ajs * wstar(j) - ajsm * wstar(j-1) ) + dt * gjs );	end;%	wnew(NX+1) = exp(2*t(n+1)) / ( 1 + exp(t(n+1)) );    wnew(NX+1) = (t(n+1))^2;	wold(2:NX+1) = wnew(2:NX+1);end;w = wold;exact = zeros ( 1, NX + 1 );for j = 1 : NX + 1%    exact(j) = x(j) * exp(2*tf) / ( 1 + x(j) * exp(tf) );     if ( x(j) > 4 / ( 4*tf+1 ) )	    exact(j) = (16/x(j)^2) * ( 1/4 - 1/x(j) + tf )^2;     else	    exact(j) = 0;     end;end;function y = ic ( x )%if ( ( 0 <= x ) & ( x <= 1 ) )%   y = 1 - cos(2*pi*x);%  y = x / ( 1 + x );%else   y = 0;%end;%if ( ( x <= 0 ) )%   y = 70;%elseif ( x < 2 )%   y = 100 - 60*cos(pi*x)/(2-x/2);%else%   y = 40;%end;