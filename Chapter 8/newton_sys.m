function y = newton_sys ( F, J, x0, TOL, Nmax )%NEWTON_SYS   solve the system of nonlinear equations F(x) = 0 using %             Newton's method%%     calling sequences:%             y = newton_sys ( F, J, x0, TOL, Nmax )%             newton_sys ( F, J, x0, TOL, Nmax )%%     inputs:%             F       vector-valued function of a vector argument which%                     defines the system of equations to be solved%             J       matrix-valued function which computes the Jacobian %                     associated with the function F%             x0      vector containing initial guess for solution of %                     nonlinear system%             TOL     convergence tolerance - applied to maximum norm of%                     difference between successive approximations%             NMax    maximum number of iterations to be performed%%     output:%             y       approximate solution of nonlinear system%%     dependencies:%             this routine uses both LUfactor and LUsolve%%     NOTE:%             if NEWTON_SYS is called with no output arguments, each %             approximation to the solution is displayed%%             if the maximum number of iterations is exceeded, a meesage%             to this effect will be displayed and the current approximation %             will be returned in the output value%old = x0;for i = 1 : Nmax    Fold = feval(F,old);	Jold = feval(J,old);	[lu pvt] = LUfactor ( Jold );	dx = LUsolve ( lu, -Fold, pvt );    new = old + dx;		if ( nargout == 0 )	   disp ( new )	end		if ( max(abs(dx)) < TOL ) 	   if ( nargout == 1 )	      y = new;	   end	   return	else	   old = new;	endenddisp('newton_sys error: Maximum number of iterations exceeded');if ( nargout == 1 ) y = new; end;function [lu, pvt] = LUfactor ( A )%LUFACTOR     compute an LU decomposition for the matrix A%%     calling sequence:%             [lu, pvt] = LUfactor ( A )%%     input:%             A       coefficient matrix for linear system%                     (matrix must be square)%%     outputs:%             lu      matrix containing LU decomposition of input matrix%                     A - the L matrix in the decomposition consists of%                     1's along the main diagonal together with the %                     strictly lower triangular portion of the matrix lu;%                     the U matrix in the decomposition is the upper%                     triangular portion of the matrix lu%             pvt     vector which indicates the permutation of the rows%                     performed during the decomposition process%%     NOTE:%             this routine performs partial pivoting with implicit row %             interchanges during the decomposition process%%             the system Ax = b can be solved by first applying LUfactor%             to the coefficient matrix A and then applying the companion%             routine, LUsolve, for each right-hand side vector b%[nrow ncol] = size ( A );if ( nrow ~= ncol )   disp ( 'LUfactor error: Square coefficient matrix required' );   return;end;%%   initialize row pointers%for i=1:nrow    pvt(i) = i;end;for i = 1 : nrow - 1%%   partial pivoting%	t =  min ( find ( abs(A(pvt(i:nrow),i)) == max(abs(A(pvt(i:nrow),i))) ) + i-1 );    if ( t ~= i )	   temp = pvt(i);	   pvt(i) = pvt(t);	   pvt(t) = temp;	end;%%   terminate if matrix is singular%	if ( A(pvt(i),i) == 0 ) 	   disp ( 'LUfactor error: coefficient matrix is singular' );	   lu = A;	   return	end;	%%   elimination steps%    for j = i+1 : nrow	    m = -A(pvt(j),i) / A(pvt(i),i);		A(pvt(j),i) = -m;		A(pvt(j), i+1:nrow) = A(pvt(j), i+1:nrow) + m * A(pvt(i), i+1:nrow);    end;end;lu = A;function x = LUsolve ( lu, b, pvt )%LUSOLVE      perform forward and backward substitution to obtain the%             solution to the linear system Ax = b, where the LU%             decomposition of the coefficient matrix has previously%             been determined%%     calling sequence:%             x = LUsolve ( lu, b, pvt )%             LUsolve ( lu, b, pvt )%%     inputs:%             lu      matrix containing LU decomposition of coefficient%                     matrix for the linear system - the L matrix in the %                     decomposition must consists of 1's along the main  %                     diagonal together with the strictly lower triangular %                     portion of the matrix lu; the U matrix in the %                     decomposition must be the upper triangular portion %                     of the matrix lu%             b       right-hand side vector for linear system%             pvt     vector which indicates the permutation of the rows%                     performed during the LU decomposition of the %                     coefficient matrix%%     output:%             x       solution vector%%     NOTE:%             the system Ax = b can be solved by first applying LUfactor%             to the coefficient matrix A and then applying LUsolve once%             for each right-hand side vector b%[nrow ncol] = size ( lu );%%   forward substitution%z(1) = b(pvt(1));for i = 2 : nrow    z(i) = b(pvt(i)) - sum ( z(1:i-1) .* lu(pvt(i), 1:i-1) );end;%%   back substitution%x(nrow) = z(nrow) / lu(pvt(nrow), nrow);for i = nrow - 1 : -1 : 1    x(i) = ( z(i) - sum ( x(i+1:nrow) .* lu(pvt(i), i+1:nrow) ) ) / lu(pvt(i),i);end;