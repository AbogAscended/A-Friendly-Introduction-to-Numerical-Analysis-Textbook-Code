function [w, x, y, rn] = jac_yline ( a, b, N, c, d, M, f, g, TOL, Nmax )x = linspace ( a, b, N+1 );y = linspace ( c, d, M+1 );h = (b-a)/N;hsq = h*h;if ( nargout > 3 ) rn = zeros ( 1, Nmax ); end;wold = zeros ( N+1, M+1 );for i = 1 : N+1    wold(i,  1) = feval ( g, x(i), y(1) );	wold(i,M+1) = feval ( g, x(i), y(M+1) );end;for j = 2 : M    wold(1,  j) = feval ( g, x(1), y(j) );	wold(N+1,j) = feval ( g, x(N+1), y(j) );end;fmat = zeros ( N+1, M+1 );for i = 2 : N    for j = 2 : M	    fmat(i,j) = hsq * feval ( f, x(i), y(j) );	end;end;c = -ones ( N-2, 1 );a = 4 * ones ( N-1, 1 );b = c;for its = 1 : Nmax    res_norm = 0;		for j = 2 : M	    rhs = wold(2:N,j-1) + wold(2:N,j+1) - fmat(2:N,j);        rhs(1) = rhs(1) + wold(1,j);		rhs(N-1) = rhs(N-1) + wold(N+1,j);		new = tridiagonal ( c, a, b, rhs );		res = wold(2:N,j) - new;	    wnew(2:N,j) = new;		if ( max ( abs ( res ) ) > res_norm ) res_norm = max(abs(res)); end;	end;		wold(2:N,2:M) = wnew(2:N,2:M);	if ( nargout > 3 ) rn(its) = res_norm; end;	if ( res_norm < TOL ) w = wold; disp(its); return; end;end;w = wold; 	   