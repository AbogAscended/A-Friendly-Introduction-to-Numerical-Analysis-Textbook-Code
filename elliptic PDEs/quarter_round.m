function [w, r, t] = quarter_round ( N, M, TOL, Nmax, omega )r = linspace ( 0, 1, N+1 );t = linspace ( 0, pi/2, M+1 );dr = 1/N;dt = (pi/2)/M;dr2 = dr * dr;lambda = [ 0 dr2/(dt*dt)./(r(2:N).*r(2:N)) ];w = zeros ( N+1, M+1 );fmat = -1 * dr2 * ones ( N+1, M+1 );for its = 1 : Nmax    res_norm = 0;	for j = 2 : M	    for i = 2 : N		    new = ( 1 - omega ) * w(i,j) + omega * ( ( 1 - dr / (2*r(i)) ) * w(i-1,j) + ( 1 + dr / (2*r(i)) ) * w(i+1,j) + lambda(i) * w(i,j-1) + lambda(i) * w(i,j+1) - fmat(i,j) ) / ( 2 * ( 1 + lambda(i) ) );			res = w(i,j) - new;			w(i,j) = new;			if ( abs ( res ) > res_norm ) res_norm = abs(res); end;		end;	end;			if ( res_norm < TOL ) disp(its); return; end;end; 	   