function y = muller ( f, x0, x1, x2, TOL, Nmax )%MULLER        approximate the root of an arbitrary function using %              Muller's method%%     calling sequences:%             y = muller ( 'f', x0, x1, x2, TOL, Nmax )%             muller ( 'f', x0, x1, x2, TOL, Nmax )%%     inputs:%             f       string containing name of m-file defining function%                     whose root is to be located%             x0, x1, x2   %                     initial approximations to location of root%             TOL     absolute error convergence tolerance%             NMax    maximum number of iterations to be performed%%     output:%             y       approximate value of root%%     NOTE:%             if MULLER is called with no output arguments, the %             iteration number and the current approximation to the %             root (both real and imaginary part) are displayed%%             if the maximum number of iterations is exceeded, a message%             to this effect will be displayed and the most recent%             approximation will be returned in the output value%fx0 = feval ( f, x0 );fx1 = feval ( f, x1 );for i = 1 : Nmax    fx2 = feval ( f, x2 );    h1 = x1 - x2;	h2 = x0 - x2;	del1 = ( fx1 - fx2 ) / h1;	del2 = ( fx0 - fx2 ) / h2;		c = fx2;	a = ( del1 - del2 ) / ( h1 - h2 );	b = ( h1*del2 - h2*del1 ) / ( h1 - h2 );		disc = sqrt ( b*b - 4*a*c );	if ( abs(b-disc) < abs(b+disc) )	   denom = b+disc;	else	   denom = b-disc;	end	dx = -2*c / denom;    new = x2 + dx;		if ( nargout == 0 )	   disp ( sprintf ( '\t\t %3d \t %.10f \t %.10f \n', i+2, real(new), imag(new) ) )	end		if ( abs(dx) < TOL ) 	   if ( nargout == 1 )	      y = new;	   end	   return	else	   x0 = x1;   x1 = x2;   x2 = new;	   fx0 = fx1;	   fx1 = fx2;	end	enddisp('Maximum number of iterations exceeded')if ( nargout == 1 ) y = new; end