function [w, r,t] = btcs_polar ( a,b, NX, t0, tf, NT, D, bc, f )r = linspace ( a, b, NX+1 );t = linspace ( t0, tf, NT+1 );dr = (b-a) / NX;dt = (tf-t0) / NT;lambda = D * dt / dr^2;mu = D * dt / dr;wnew = zeros ( NX+1,1 );wold = zeros ( NX+1,1 );for i = 1 : NX    wold(i) = feval ( f, r(i) );end;sub   = -( lambda - 0.5 * mu ./ r(2:NX) );super = [ -4*lambda, -( lambda + 0.5 * mu ./ r(2:NX-1) ) ];for j = 2 : NT+1    [ temp, wnew(NX+1) ] = feval ( bc, t0+(j-1)*dt );	[ ua ub ] = feval ( bc, t0+(j-1)*dt );		diag  = ( 1 + 2 * lambda ) * ones ( 1, NX );	diag(1) = diag(1) + 2 * lambda; 	%	for i = 2 : NX%	    sv(i) = feval ( source, x(i), t0+(j-1)*dt );%		diag(i-1) = diag(i-1) + dt * feval ( decay, x(i), t0+(j-1)*dt );%	end;		rhs = wold(1:NX)' + [ zeros(1,NX-1) lambda*(1+0.5/(NX-1))*ub ];    wnew(1:NX) = tridiagonal ( sub, diag, super, rhs );	wold = wnew;end;w = wnew;